AWSTemplateFormatVersion: '2010-09-09'
Transform: AWS::Serverless-2016-10-31
Description: HelloWorld + EventBridge-triggered Step Functions (LambdaA loop -> LambdaB)

Globals:
  Function:
    Runtime: python3.11
    MemorySize: 128
    Timeout: 5

Parameters:
  EventBusName:
    Type: String
    Default: TriggerStepFunctionsBus
    Description: EventBridge bus name to listen on
  EventSource:
    Type: String
    Default: custom.loop
    Description: EventBridge event source to trigger the state machine
  EventDetailType:
    Type: String
    Default: StartLoop
    Description: EventBridge detail-type to trigger the state machine
  RetrySeconds:
    Type: Number
    Default: 5
    Description: Seconds to wait before re-invoking LambdaA when results=false

Resources:
  # ---- Your existing Lambda (unrelated to the SFN flow)
  HelloWorldFunction:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: hello-world-fn
      Handler: app.handler
      CodeUri: post_lambda/
      Description: Prints Hello World
      Policies:
       - AWSLambdaBasicExecutionRole

  # ---- LambdaA (looping) and LambdaB (final)
  LambdaAFunction:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: lambda-a
      Handler: app.handler
      CodeUri: lambda_a/
      Description: 'Returns {"results": true|false} to drive the loop'
      Policies:
       - AWSLambdaBasicExecutionRole


  LambdaBFunction:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: lambda-b
      Handler: app.handler
      CodeUri: lambda_b/
      Description: Runs after LambdaA returns results=true
      Policies:
       - AWSLambdaBasicExecutionRole

  # ---- Step Functions: InvokeA -> (results?) -> Wait/loop or InvokeB
  LoopingStateMachine:
    Type: AWS::Serverless::StateMachine
    Properties:
      Name: looping-sm
      Definition:
        Comment: Invoke LambdaA until results=true, then run LambdaB
        StartAt: InvokeA
        States:
          InvokeA:
            Type: Task
            Resource: arn:aws:states:::lambda:invoke
            Parameters:
              FunctionName: ${LambdaAArn}
              Payload.$: "$"                  # forward whole event
            ResultSelector:
              Payload.$: "$.Payload"          # parse Lambda JSON body
            Next: CheckResults
            Retry:
              - ErrorEquals:
                  - Lambda.ServiceException
                  - Lambda.TooManyRequestsException
                  - Lambda.ThrottlingException
                IntervalSeconds: 2
                MaxAttempts: 3
          CheckResults:
            Type: Choice
            Choices:
              - Variable: $.Payload.results    # expects {"results": true|false}
                BooleanEquals: true
                Next: InvokeB
            Default: WaitThenRetry
          WaitThenRetry:
            Type: Wait
            Seconds: ${RetrySeconds}
            Next: InvokeA
          InvokeB:
            Type: Task
            Resource: arn:aws:states:::lambda:invoke
            Parameters:
              FunctionName: ${LambdaBArn}
              Payload.$: "$"
            ResultSelector:
              Payload.$: "$.Payload"
            End: true
      DefinitionSubstitutions:
        LambdaAArn: !GetAtt LambdaAFunction.Arn
        LambdaBArn: !GetAtt LambdaBFunction.Arn
        RetrySeconds: !Ref RetrySeconds
      Policies:
        - LambdaInvokePolicy:
            FunctionName: !Ref LambdaAFunction
        - LambdaInvokePolicy:
            FunctionName: !Ref LambdaBFunction
      Events:
        StartFromEventBridge:
          Type: EventBridgeRule
          Properties:
            EventBusName: !Ref EventBusName
            Pattern:
              source: [ !Ref EventSource ]
              detail-type: [ !Ref EventDetailType ]
            # By default, the full EventBridge event becomes the state input.
            # If you want only the "detail" object, add: InputPath: '$.detail'

Outputs:
  HelloWorldFunctionName:
    Value: !Ref HelloWorldFunction
    Description: Name of the Hello World Lambda

  LambdaAFunctionName:
    Value: !Ref LambdaAFunction
    Description: Name of LambdaA (looping)

  LambdaBFunctionName:
    Value: !Ref LambdaBFunction
    Description: Name of LambdaB (final step)

  StateMachineArn:
    Value: !Ref LoopingStateMachine
    Description: ARN of the Step Functions state machine
