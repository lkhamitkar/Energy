AWSTemplateFormatVersion: '2010-09-09'
Transform: AWS::Serverless-2016-10-31
Description: CFN/SAM - HTTP API for Hello, EventBridge -> Step Functions (LambdaA loop -> LambdaB)

Parameters:
  EventBusName:
    Type: String
    Default: TriggerStepFunctionsBus
    Description: EventBridge bus name (use 'default' to use the account's default bus)
  EventSource:
    Type: String
    Default: custom.loop
    Description: EventBridge event source to trigger the state machine
  EventDetailType:
    Type: String
    Default: StartLoop
    Description: EventBridge detail-type to trigger the state machine
  RetrySeconds:
    Type: Number
    Default: 5
    Description: Seconds to wait before retrying LambdaA when ok=false
  orderResultBucketName:
    Type: String
    Default: order-details-energy
    Description: S3 bucket used by 'cloudformation package' / SAM package
  RecordDynamoTableNameArn:
    Type: String
    Default: arn:aws:dynamodb:eu-west-1:452344168826:table/records_table
    Description: Dynamo Db table name to store order records


Conditions:
  UseDefaultBus: !Equals [ !Ref EventBusName, 'default' ]
  CreateCustomBus: !Not [ !Condition UseDefaultBus ]

Resources:
  ############################################
  # EVENT BUS (created only if name != 'default')
  ############################################
  TriggerBus:
    Condition: CreateCustomBus
    Type: AWS::Events::EventBus
    Properties:
      Name: !Ref EventBusName

  ############################################
  # IAM ROLES
  ############################################
  LambdaExecutionRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal: { Service: lambda.amazonaws.com }
            Action: sts:AssumeRole
      Policies:
        - PolicyName: LambdaBasicLogsAndEvents
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - logs:CreateLogGroup
                  - logs:CreateLogStream
                  - logs:PutLogEvents
                Resource: '*'
              - Effect: Allow
                Action: events:PutEvents
                Resource: !If
                  - UseDefaultBus
                  - !Sub 'arn:${AWS::Partition}:events:${AWS::Region}:${AWS::AccountId}:event-bus/default'
                  - !GetAtt TriggerBus.Arn

        - PolicyName: LambdaS3Access
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - s3:ListBucket
                  - s3:PutObject
                  - s3:AbortMultipartUpload
                  - s3:PutObjectAcl
                  - s3:GetObject
                Resource:
                  - !Sub 'arn:aws:s3:::${orderResultBucketName}'
                  - !Sub 'arn:aws:s3:::${orderResultBucketName}/*'
        - PolicyName: LambdaDynamoAccess
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - dynamodb:PutItem
                  - dynamodb:UpdateItem
                  - dynamodb:GetItem
                  - dynamodb:BatchWriteItem
                  - dynamodb:Query
                  - dynamodb:Scan
                  - dynamodb:DescribeTable
                Resource:
                  - !Sub '${RecordDynamoTableNameArn}'
                  - !Sub '${RecordDynamoTableNameArn}/index/*'

  StepFunctionsExecutionRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal: { Service: states.amazonaws.com }
            Action: sts:AssumeRole
      Policies:
        - PolicyName: InvokeLambdas
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action: lambda:InvokeFunction
                Resource:
                  - !GetAtt LambdaAFunction.Arn
                  - !Sub '${LambdaAFunction.Arn}:*'
                  - !GetAtt LambdaBFunction.Arn
                  - !Sub '${LambdaBFunction.Arn}:*'
        - PolicyName: SfnLoggingPermissions
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - logs:CreateLogDelivery
                  - logs:GetLogDelivery
                  - logs:UpdateLogDelivery
                  - logs:DeleteLogDelivery
                  - logs:ListLogDeliveries
                  - logs:PutResourcePolicy
                  - logs:DescribeResourcePolicies
                  - logs:DescribeLogGroups
                Resource: "*"

  EventBridgeToSFNRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal: { Service: events.amazonaws.com }
            Action: sts:AssumeRole
      Policies:
        - PolicyName: StartSfnExecution
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action: states:StartExecution
                Resource: !Ref LoopingStateMachine

  ############################################
  # LAMBDAS (SAM)
  ############################################
  PostLambdaFunction:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: post-lambda
      Runtime: python3.11
      Handler: app.lambda_handler
      Role: !GetAtt LambdaExecutionRole.Arn
      CodeUri: post_lambda/

  LambdaAFunction:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: lambda-a
      Runtime: python3.11
      Handler: app.lambda_handler
      Role: !GetAtt LambdaExecutionRole.Arn
      CodeUri: lambda_a/

  LambdaBFunction:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: lambda-b
      Runtime: python3.11
      Handler: app.lambda_handler
      Role: !GetAtt LambdaExecutionRole.Arn
      CodeUri: lambda_b/

  ############################################
  # HTTP API (API Gateway v2) -> PostLambdaFunction
  ############################################
  HttpApi:
    Type: AWS::ApiGatewayV2::Api
    Properties:
      Name: PostLambdaHttpApi
      ProtocolType: HTTP
      CorsConfiguration:
        AllowOrigins: ['*']
        AllowMethods: ['POST','OPTIONS']
        AllowHeaders: ['*']

  PostLambdaIntegration:
    Type: AWS::ApiGatewayV2::Integration
    Properties:
      ApiId: !Ref HttpApi
      IntegrationType: AWS_PROXY
      IntegrationUri: !GetAtt PostLambdaFunction.Arn
      PayloadFormatVersion: '2.0'

  PostLambdaRoute:
    Type: AWS::ApiGatewayV2::Route
    Properties:
      ApiId: !Ref HttpApi
      RouteKey: 'POST /hello'
      Target: !Sub 'integrations/${PostLambdaIntegration}'

  PostLambdaStageDefault:
    Type: AWS::ApiGatewayV2::Stage
    Properties:
      ApiId: !Ref HttpApi
      StageName: '$default'
      AutoDeploy: true

  PostLambdaPermissionForHttpApi:
    Type: AWS::Lambda::Permission
    Properties:
      FunctionName: !Ref PostLambdaFunction
      Action: lambda:InvokeFunction
      Principal: apigateway.amazonaws.com
      SourceArn: !Sub 'arn:${AWS::Partition}:execute-api:${AWS::Region}:${AWS::AccountId}:${HttpApi}/*/*'

  ############################################
  # STEP FUNCTIONS STATE MACHINE
  ############################################
  StateMachineLogGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: !Sub "/aws/states/${AWS::StackName}-sfn"
      RetentionInDays: 14


  LoopingStateMachine:
    Type: AWS::StepFunctions::StateMachine
    Properties:
      StateMachineName: OrderProcessingStateMachine
      RoleArn: !GetAtt StepFunctionsExecutionRole.Arn
      LoggingConfiguration:
        Destinations:
          - CloudWatchLogsLogGroup:
              LogGroupArn: !GetAtt StateMachineLogGroup.Arn
        IncludeExecutionData: true         # include input/output
        Level: ALL
      DefinitionString:
        Fn::Sub: |
          {
            "Comment": "Invoke LambdaA until ok=true, then run LambdaB",
            "StartAt": "InvokeA",
            "States": {
              "InvokeA": {
                "Type": "Task",
                "Resource": "arn:${AWS::Partition}:states:::lambda:invoke",
                "Parameters": {
                  "FunctionName": "${LambdaAFunction.Arn}",
                  "Payload.$": "$"
                },
                "ResultSelector": {
                  "Payload.$": "$.Payload"
                },
                "Next": "CheckOk",
                "Retry": [
                  {
                    "ErrorEquals": [
                      "Lambda.ServiceException",
                      "Lambda.TooManyRequestsException",
                      "Lambda.ThrottlingException"
                    ],
                    "IntervalSeconds": 2,
                    "MaxAttempts": 3
                  }
                ]
              },
              "CheckOk": {
                "Type": "Choice",
                "Choices": [
                  {
                    "Variable": "$.Payload.results",
                    "BooleanEquals": true,
                    "Next": "InvokeB"
                  }
                ],
                "Default": "WaitThenRetry"
              },
              "WaitThenRetry": {
                "Type": "Wait",
                "Seconds": ${RetrySeconds},
                "Next": "InvokeA"
              },
              "InvokeB": {
                "Type": "Task",
                "Resource": "arn:${AWS::Partition}:states:::lambda:invoke",
                "Parameters": {
                  "FunctionName": "${LambdaBFunction.Arn}",
                  "Payload.$": "$"
                },
                "ResultSelector": {
                  "Payload.$": "$.Payload"
                },
                "End": true
              }
            }
          }

  ############################################
  # EVENTBRIDGE RULE -> START STATE MACHINE
  ############################################
  StartLoopRule:
    Type: AWS::Events::Rule
    Properties:
      Name: start-loop-rule
      Description: Start the Step Functions looping state machine
      State: ENABLED
      # EventBusName: !If [ UseDefaultBus, 'default', !Ref TriggerBus ]
      ScheduleExpression: rate(2 minutes)
      Targets:
        - Id: StepFunctionsTarget
          Arn: !Ref LoopingStateMachine
          RoleArn: !GetAtt EventBridgeToSFNRole.Arn
          Input: '{"trigger":"schedule"}'
Outputs:
  ApiBaseUrl:
    Description: HTTP API base URL
    Value: !Sub 'https://${HttpApi}.execute-api.${AWS::Region}.amazonaws.com'
  PostLambdaInvokeUrl:
    Description: POST URL for PostLambdaFunction
    Value: !Sub 'https://${HttpApi}.execute-api.${AWS::Region}.amazonaws.com/hello'
  PostLambdaFunctionName:
    Description: Name of PostLambda Function
    Value: !Ref PostLambdaFunction
  LambdaAFunctionName:
    Description: Name of LambdaA
    Value: !Ref LambdaAFunction
  LambdaBFunctionName:
    Description: Name of LambdaB
    Value: !Ref LambdaBFunction
  StateMachineArn:
    Description: ARN of the Step Functions state machine
    Value: !Ref LoopingStateMachine
  EffectiveEventBusName:
    Value: !If [ UseDefaultBus, 'default', !Ref EventBusName ]
